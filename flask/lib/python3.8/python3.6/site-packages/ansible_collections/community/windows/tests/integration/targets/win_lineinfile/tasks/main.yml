# Test code for the win_lineinfile module, adapted from the standard lineinfile module tests
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

- name: deploy the test file for lineinfile
  ansible.windows.win_copy: src=test.txt dest={{ remote_tmp_dir }}/test.txt
  register: result

- name: assert that the test file was deployed
  assert:
    that:
    - "result.changed == true"

- name: stat the test file
  # Note: The test.txt is copied from a Linux host, therefore it will retain
  # unix line ending when stat'd here. This affects checksum, meaning that
  # when this repo is checked out to Windows, checksum does not match checked-
  # out file checksum unless line-endings are altered.
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test.txt
  register: result

- name: check win_stat file result
  assert:
    that:
      - "result.stat.exists"
      - "not result.stat.isdir"
      - "result.stat.checksum == '5feac65e442c91f557fc90069ce6efc4d346ab51'"
      - "result is not failed"
      - "result is not changed"


- name: insert a line at the beginning of the file, and back it up
  # 01
  win_lineinfile: dest={{ remote_tmp_dir }}/test.txt state=present line="New line at the beginning" insertbefore="BOF" backup=yes
  register: result

- name: check backup_file
  ansible.windows.win_stat:
    path: '{{ result.backup_file }}'
  register: backup_file

- name: assert that the line was inserted at the head of the file
  assert:
    that:
    - result.changed == true
    - result.msg == 'line added'
    - backup_file.stat.exists == true

- name: stat the backup file
  ansible.windows.win_stat: path={{result.backup}}
  register: result

- name: assert the backup file matches the previous hash
  assert:
    that:
    - "result.stat.checksum == '5feac65e442c91f557fc90069ce6efc4d346ab51'"

- name: stat the test after the insert at the head
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test.txt
  register: result

- name: assert test hash is what we expect for the file with the insert at the head
  assert:
    that:
    - result.stat.checksum == 'c61233b0ee2038aab41b5f30683c57b2a013b376'

- name: insert a line at the end of the file
  # 02
  win_lineinfile: dest={{ remote_tmp_dir }}/test.txt state=present line="New line at the end" insertafter="EOF"
  register: result

- name: assert that the line was inserted at the end of the file
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"

- name: stat the test after the insert at the end
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test.txt
  register: result

- name: assert test checksum matches after the insert at the end
  assert:
    that:
    - result.stat.checksum == 'a91260ad67b00609cc0737ff70ac5170c6a519a8'

- name: insert a line after the first line
  # 03
  win_lineinfile: dest={{ remote_tmp_dir }}/test.txt state=present line="New line after line 1" insertafter="^This is line 1$"
  register: result

- name: assert that the line was inserted after the first line
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"

- name: stat the test after insert after the first line
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test.txt
  register: result

- name: assert test checksum matches after the insert after the first line
  assert:
    that:
    - result.stat.checksum == '6ffbabdaa21ecb3593d32144de535598cfd7c6ea'

- name: insert a line before the last line
  # 04
  win_lineinfile: dest={{ remote_tmp_dir }}/test.txt state=present line="New line before line 5" insertbefore="^This is line 5$"
  register: result

- name: assert that the line was inserted before the last line
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"

- name: stat the test after the insert before the last line
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test.txt
  register: result

- name: assert test checksum matches after the insert before the last line
  assert:
    that:
    - result.stat.checksum == '49d988ad97fb4cce3ad795c8459f1cde231a891b'

- name: replace a line with backrefs
  # 05
  win_lineinfile: dest={{ remote_tmp_dir }}/test.txt state=present line="This is line 3" backrefs=yes regexp="^(REF).*$"
  register: result

- name: assert that the line with backrefs was changed
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line replaced'"


- name: stat the test after the backref line was replaced
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test.txt
  register: result

- name: assert test checksum matches after backref line was replaced
  assert:
    that:
    - result.stat.checksum == '6f9c2128f4c886f3c40c1f1cf50241d74f160437'

- name: remove the middle line
  # 06
  win_lineinfile: dest={{ remote_tmp_dir }}/test.txt state=absent regexp="^This is line 3$"
  register: result

- name: assert that the line was removed
  assert:
    that:
    - "result.changed == true"
    - "result.msg == '1 line(s) removed'"

- name: stat the test after the middle line was removed
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test.txt
  register: result

- name: assert test checksum matches after the middle line was removed
  assert:
    that:
    - result.stat.checksum == '4b7910c84bd1177b9013f277c85d5be55f384a36'

- name: run a validation script that succeeds
  # 07
  win_lineinfile: dest={{ remote_tmp_dir }}/test.txt state=absent regexp="^This is line 5$" validate="sort.exe %s"
  register: result

- name: assert that the file validated after removing a line
  assert:
    that:
    - "result.changed == true"
    - "result.msg == '1 line(s) removed'"

- name: stat the test after the validation succeeded
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test.txt
  register: result

- name: assert test checksum matches after the validation succeeded
  assert:
    that:
    - result.stat.checksum == '938afecdcde51fda42ddbea6f2e92876e710f289'

- name: run a validation script that fails
  # 08
  win_lineinfile: dest={{ remote_tmp_dir }}/test.txt state=absent regexp="^This is line 1$" validate="sort.exe %s.foo"
  register: result
  ignore_errors: yes

- name: assert that the validate failed
  assert:
    that:
    - "result.failed == true"

- name: stat the test after the validation failed
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test.txt
  register: result

- name: assert test checksum matches the previous after the validation failed
  assert:
    that:
    - result.stat.checksum == '938afecdcde51fda42ddbea6f2e92876e710f289'

- name: use create=yes
  # 09
  win_lineinfile: dest={{ remote_tmp_dir }}/new_test.txt create=yes insertbefore=BOF state=present line="This is a new file"
  register: result

- name: assert that the new file was created
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"

- name: validate that the newly created file exists
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/new_test.txt
  register: result
  ignore_errors: yes

- name: assert the newly created test checksum matches
  assert:
    that:
    - result.stat.checksum == '84faac1183841c57434693752fc3debc91b9195d'

# Test EOF in cases where file has no newline at EOF
- name: testnoeof deploy the file for lineinfile
  ansible.windows.win_copy: src=testnoeof.txt dest={{ remote_tmp_dir }}/testnoeof.txt
  register: result

- name: testnoeof insert a line at the end of the file
  # 10
  win_lineinfile: dest={{ remote_tmp_dir }}/testnoeof.txt state=present line="New line at the end" insertafter="EOF"
  register: result

- name: testempty assert that the line was inserted at the end of the file
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"

- name: testnoeof stat the no newline EOF test after the insert at the end
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/testnoeof.txt
  register: result

- name: testnoeof assert test checksum matches after the insert at the end
  assert:
    that:
    - result.stat.checksum == '229852b09f7e9921fbcbb0ee0166ba78f7f7f261'

- name: add multiple lines at the end of the file
  # 11
  win_lineinfile: dest={{ remote_tmp_dir }}/test.txt state=present line="This is a line\r\nwith newline character" insertafter="EOF"
  register: result

- name: assert that the multiple lines was inserted
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"

- name: stat file after adding multiple lines
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test.txt
  register: result

- name: assert test checksum matches after inserting multiple lines
  assert:
    that:
    - result.stat.checksum == 'd10d70cb77a16fb54f143bccbf711f3177acd310'



# Test EOF with empty file to make sure no unnecessary newline is added
- name: testempty deploy the testempty file for lineinfile
  ansible.windows.win_copy: src=testempty.txt dest={{ remote_tmp_dir }}/testempty.txt
  register: result

- name: testempty insert a line at the end of the file
  # 12
  win_lineinfile: dest={{ remote_tmp_dir }}/testempty.txt state=present line="New line at the end" insertafter="EOF"
  register: result

- name: testempty assert that the line was inserted at the end of the file
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"

- name: testempty stat the test after the insert at the end
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/testempty.txt
  register: result

- name: testempty assert test checksum matches after the insert at the end
  assert:
    that:
    - result.stat.checksum == 'd3d34f11edda51be7ca5dcb0757cf3e1257c0bfe'

- name: replace a line with backrefs included in the line
  # 13
  win_lineinfile: dest={{ remote_tmp_dir }}/test.txt state=present line="New $1 created with the backref" backrefs=yes regexp="^This is (line 4)$"
  register: result

- name: assert that the line with backrefs was changed
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line replaced'"

- name: stat the test after the backref line was replaced
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test.txt
  register: result

- name: assert test checksum matches after backref line was replaced
  assert:
    that:
    - result.stat.checksum == '9c1a1451b50665e59be666c5d8c08fb99603d4f1'

###################################################################
# issue 8535

- name: create a new file for testing quoting issues
  # 14
  ansible.windows.win_copy: src=test_quoting.txt dest={{ remote_tmp_dir }}/test_quoting.txt
  register: result

- name: assert the new file was created
  assert:
    that:
    - result.changed

- name: use with_items to add code-like strings to the quoting txt file
  win_lineinfile: >
    dest={{ remote_tmp_dir }}/test_quoting.txt
    line="{{ item }}"
    insertbefore="BOF"
  with_items:
    - "'foo'"
    - "dotenv.load();"
    - "var dotenv = require('dotenv');"
  register: result

- name: assert the quote test file was modified correctly
  assert:
    that:
    - result.results|length == 3
    - result.results[0].changed
    - result.results[0].item == "'foo'"
    - result.results[1].changed
    - result.results[1].item == "dotenv.load();"
    - result.results[2].changed
    - result.results[2].item == "var dotenv = require('dotenv');"

- name: stat the quote test file
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_quoting.txt
  register: result

- name: assert test checksum matches for quote test file
  assert:
    that:
    - result.stat.checksum == 'f3bccdbdfa1d7176c497ef87d04957af40ab48d2'

- name: append a line into the quoted file with a single quote
  # 15
  win_lineinfile: dest={{ remote_tmp_dir }}/test_quoting.txt line="import g'"
  register: result

- name: assert that the quoted file was changed
  assert:
    that:
    - result.changed

- name: stat the quote test file
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_quoting.txt
  register: result

- name: assert test checksum matches adding line with single quote
  assert:
    that:
    - result.stat.checksum == 'dabf4cbe471e1797d8dcfc773b6b638c524d5237'

- name: insert a line into the quoted file with many double quotation strings
  # 16
  win_lineinfile: dest={{ remote_tmp_dir }}/test_quoting.txt line='"quote" and "unquote"'
  register: result

- name: assert that the quoted file was changed
  assert:
    that:
    - result.changed

- name: stat the quote test file
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_quoting.txt
  register: result

- name: assert test checksum matches quoted line added
  assert:
    that:
    - result.stat.checksum == '9dc1fc1ff19942e2936564102ad37134fa83b91d'


# Windows vs. Unix line separator test cases
- name: Create windows test file with initial line
  # 17
  win_lineinfile: dest={{ remote_tmp_dir }}/test_windows_sep.txt create=yes insertbefore=BOF state=present line="This is a new file"
  register: result

- name: assert that the new file was created
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"

- name: validate that the newly created file exists
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_windows_sep.txt
  register: result

- name: assert the newly created file checksum matches
  assert:
    that:
    - result.stat.checksum == '84faac1183841c57434693752fc3debc91b9195d'

- name: Test appending to the file using the default (windows) line separator
  # 18
  win_lineinfile: dest={{ remote_tmp_dir }}/test_windows_sep.txt insertbefore=EOF state=present line="This is the last line"
  register: result

- name: assert that the new line was added
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"

- name: stat the file
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_windows_sep.txt
  register: result

- name: assert the file checksum matches expected checksum
  assert:
    that:
    - result.stat.checksum == '6c6f51f98eb499852fbb7ef3b212c26752c25c31'


- name: Create unix test file with initial line
  # 19
  win_lineinfile: dest={{ remote_tmp_dir }}/test_unix_sep.txt create=yes insertbefore=BOF state=present line="This is a new file"
  register: result

- name: assert that the new file was created
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"

- name: validate that the newly created file exists
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_unix_sep.txt
  register: result

- name: assert the newly created file checksum matches
  assert:
    that:
    - result.stat.checksum == '84faac1183841c57434693752fc3debc91b9195d'

- name: Test appending to the file using unix line separator
  # 20
  win_lineinfile: dest={{ remote_tmp_dir }}/test_unix_sep.txt insertbefore=EOF state=present line="This is the last line" newline="unix"
  register: result

- name: assert that the new line was added
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"

- name: stat the file
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_unix_sep.txt
  register: result

- name: assert the file checksum matches expected checksum
  assert:
    that:
    - result.stat.checksum == '4aa2ad771bb1453406760eadee8234265d599dcf'


# Encoding management test cases

# Default (auto) encoding should use utf-8 with no BOM
- name: Test create file without explicit encoding results in utf-8 without BOM
  # 21
  win_lineinfile: dest={{ remote_tmp_dir }}/test_auto_utf8.txt create=yes insertbefore=BOF state=present line="This is a new utf-8 file"
  register: result

- name: assert that the new file was created
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"
    - "result.encoding == 'utf-8'"

- name: validate that the newly created file exists
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_auto_utf8.txt
  register: result

- name: assert the newly created file checksum matches
  assert:
    that:
    - result.stat.checksum == 'b69fcbacca8291a4668f57fba91d7c022f1c3dc7'

- name: Test appending to the utf-8 without BOM file - should autodetect UTF-8 no BOM
  # 22
  win_lineinfile: dest={{ remote_tmp_dir }}/test_auto_utf8.txt insertbefore=EOF state=present line="This is the last line"
  register: result

- name: assert that the new line was added and encoding did not change
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"
    - "result.encoding == 'utf-8'"

- name: stat the file
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_auto_utf8.txt
  register: result

- name: assert the file checksum matches
  assert:
    that:
    - result.stat.checksum == 'aeb246a40f614889534f4983f47c5567625ade53'


# UTF-8 explicit (with BOM)
- name: Test create file with explicit utf-8 encoding results in utf-8 with a BOM
  # 23
  win_lineinfile: dest={{ remote_tmp_dir }}/test_utf8.txt create=yes encoding="utf-8" insertbefore=BOF state=present line="This is a new utf-8 file"
  register: result

- name: assert that the new file was created
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"
    - "result.encoding == 'utf-8'"

- name: validate that the newly created file exists
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_utf8.txt
  register: result

- name: assert the newly created file checksum matches
  assert:
    that:
    - result.stat.checksum == 'd45344b2b3bf1cf90eae851b40612f5f37a88bbb'

- name: Test appending to the utf-8 with BOM file - should autodetect utf-8 with BOM encoding
  # 24
  win_lineinfile: dest={{ remote_tmp_dir }}/test_utf8.txt insertbefore=EOF state=present line="This is the last line"
  register: result

- name: assert that the new line was added and encoding did not change
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"
    - "result.encoding == 'utf-8'"

- name: stat the file
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_utf8.txt
  register: result

- name: assert the file checksum matches
  assert:
    that:
    - result.stat.checksum == '64c62066d06ea6c807a8fe98bc40c4903cf4c119'


# UTF-16 explicit
- name: Test create file with explicit utf-16 encoding
  # 25
  win_lineinfile: dest={{ remote_tmp_dir }}/test_utf16.txt create=yes encoding="utf-16" insertbefore=BOF state=present line="This is a new utf-16 file"
  register: result

- name: assert that the new file was created
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"
    - "result.encoding == 'utf-16'"

- name: validate that the newly created file exists
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_utf16.txt
  register: result

- name: assert the newly created file checksum matches
  assert:
    that:
    - result.stat.checksum == '785b0693cec13b60e2c232782adeda2f8a967434'

- name: Test appending to the utf-16 file - should autodetect utf-16 encoding
  # 26
  win_lineinfile: dest={{ remote_tmp_dir }}/test_utf16.txt insertbefore=EOF state=present line="This is the last line"
  register: result

- name: assert that the new line was added and encoding did not change
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"
    - "result.encoding == 'utf-16'"

- name: stat the file
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_utf16.txt
  register: result

- name: assert the file checksum matches
  assert:
    that:
    - result.stat.checksum == '7f790f323e496b7138883a3634514cc2a3426919'

# UTF-32 explicit
- name: Test create file with explicit utf-32 encoding
  # 27
  win_lineinfile: dest={{ remote_tmp_dir }}/test_utf32.txt create=yes encoding="utf-32" insertbefore=BOF state=present line="This is a new utf-32 file"
  register: result

- name: assert that the new file was created
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"
    - "result.encoding == 'utf-32'"

- name: validate that the newly created file exists
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_utf32.txt
  register: result

- name: assert the newly created file checksum matches
  assert:
    that:
    - result.stat.checksum == '7a6e3f3604c0def431aaa813173a4ddaa10fd1fb'

- name: Test appending to the utf-32 file - should autodetect utf-32 encoding
  # 28
  win_lineinfile: dest={{ remote_tmp_dir }}/test_utf32.txt insertbefore=EOF state=present line="This is the last line"
  register: result

- name: assert that the new line was added and encoding did not change
  assert:
    that:
    - "result.changed == true"
    - "result.msg == 'line added'"
    - "result.encoding == 'utf-32'"

- name: stat the file
  ansible.windows.win_stat: path={{ remote_tmp_dir }}/test_utf32.txt
  register: result

- name: assert the file checksum matches
  assert:
    that:
    - result.stat.checksum == 'd13e135c7d466cc2f985d72f12ffaa73567772e6'

#########################################################################
# issue #33858
# \r\n causes line break instead of printing literally which breaks paths.

- name: create testing file
  ansible.windows.win_copy:
    src: test_linebreak.txt
    dest: "{{ remote_tmp_dir }}/test_linebreak.txt"

- name: stat the test file
  ansible.windows.win_stat:
    path: "{{ remote_tmp_dir }}/test_linebreak.txt"
  register: result

- name: check win_stat file result
  assert:
    that:
    - result.stat.exists
    - not result.stat.isdir
    - result.stat.checksum == 'da39a3ee5e6b4b0d3255bfef95601890afd80709'
    - result is not failed
    - result is not changed

- name: insert path c:\return\new to test file
  # 29
  win_lineinfile:
    dest: "{{ remote_tmp_dir }}/test_linebreak.txt"
    line: c:\return\new
  register: result_literal

- name: insert path "c:\return\new" to test file, will cause line breaks
  # 30
  win_lineinfile:
    dest: "{{ remote_tmp_dir }}/test_linebreak.txt"
    line: "c:\return\new"
  register: result_expand

- name: assert that the lines were inserted
  assert:
    that:
    - result_literal.changed == true
    - result_literal.msg == 'line added'
    - result_expand.changed == true
    - result_expand.msg == 'line added'

- name: stat the test file
  ansible.windows.win_stat:
    path: "{{ remote_tmp_dir }}/test_linebreak.txt"
  register: result
    
- name: assert that one line is literal and the other has breaks
  assert:
    that:
    - result.stat.checksum == 'd2dfd11bc70526ff13a91153c76a7ae5595a845b'

- name: Get current working directory
  win_shell: $pwd.Path
  register: pwd

- name: create a relative tmp dir
  ansible.windows.win_tempfile:
    path: "{{ pwd.stdout | trim | win_dirname  }}"
    state: directory
  register: relative_tmp_dir

- name: Check that relative paths work
  block:
    - name: deploy the test file for lineinfile
      ansible.windows.win_copy: src=test.txt dest={{ relative_tmp_dir.path }}/test.txt
      register: result

    - name: assert that the test file was deployed
      assert:
        that:
        - "result.changed == true"

    - name: stat the test file
      ansible.windows.win_stat: path={{ relative_tmp_dir.path }}/test.txt
      register: result

    - name: check win_stat file result
      assert:
        that:
          - "result.stat.exists"
          - "not result.stat.isdir"
          - "result.stat.checksum == '5feac65e442c91f557fc90069ce6efc4d346ab51'"
          - "result is not failed"
          - "result is not changed"

    - name: insert a line at the beginning of the file, and back it up
      # 31
      win_lineinfile: dest=../{{ relative_tmp_dir.path | win_basename  }}/test.txt state=present line="New line at the beginning" insertbefore="BOF" backup=yes
      register: result

    - name: check backup_file
      ansible.windows.win_stat:
        path: '{{ result.backup_file }}'
      register: backup_file

    - name: assert that the line was inserted at the head of the file
      assert:
        that:
        - result.changed == true
        - result.msg == 'line added'
        - backup_file.stat.exists == true

    - name: stat the backup file
      ansible.windows.win_stat: path={{result.backup}}
      register: result

    - name: assert the backup file matches the previous hash
      assert:
        that:
        - "result.stat.checksum == '5feac65e442c91f557fc90069ce6efc4d346ab51'"

    - name: stat the test after the insert at the head
      ansible.windows.win_stat: path={{ relative_tmp_dir.path }}/test.txt
      register: result

    - name: assert test hash is what we expect for the file with the insert at the head
      assert:
        that:
        - result.stat.checksum == 'c61233b0ee2038aab41b5f30683c57b2a013b376'

  always:
    - ansible.windows.win_file:
        path: "{{ relative_tmp_dir.path  }}"
        state: absent
